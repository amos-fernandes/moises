#!/usr/bin/env python3
"""
üö® SISTEMA FINAL DUST CORRIGIDO - CORRE√á√ÉO PARA CRIANCAS FAMINTAS üö®
Vers√£o que resolve dust BTC + convers√£o autom√°tica para USDT
Ultra-agressivo com detec√ß√£o de dust e convers√£o inteligente
"""

import os
import time
import numpy as np
import requests
from binance.client import Client
from binance.exceptions import BinanceAPIException, BinanceOrderException
import talib
import logging
from datetime import datetime
import traceback
import threading
from threading import Lock

# Configura√ß√£o de Logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(message)s',
    handlers=[
        logging.FileHandler('atcoin_final.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class SistemaFinalDustCorrigido:
    def __init__(self):
        # üîë Chaves API Binance
        self.api_key = 'wgdJDvHxJF8JdKbMbfeUoJlN7VTe0ldyX9rUnJHaGg3AA7SYSfsxdpefwhjy17HP'
        self.api_secret = 'KYXYZKUmE0t6jpyMdTnMSE6skLgTZtClNqZNOJl4lPKCci5p5KgKJnJoyBevK5J8'
        
        # üö® CONFIGURA√á√ÉO ULTRA-AGRESSIVA PARA DUST BTC
        self.MIN_TRADE_VALUE = 10.5  # Valor m√≠nimo Binance (USD)
        self.DUST_BTC_THRESHOLD = 0.00016  # Threshold para BTC dust
        self.MIN_USDT_FOR_TRADE = 10.5  # M√≠nimo USDT para trades
        
        # üéØ PAR√ÇMETROS ULTRA-AGRESSIVOS - CRIAN√áAS DEPENDEM DISSO!
        self.SCORE_VENDA_MIN = 20  # Ainda mais baixo para dust
        self.SCORE_COMPRA_MIN = 20
        self.TAKE_PROFIT_1 = 0.15  # 0.15% ultra micro
        self.TAKE_PROFIT_2 = 0.35  # 0.35% micro  
        self.TAKE_PROFIT_3 = 0.65  # 0.65% pequeno
        self.STOP_LOSS = 0.3  # 0.3% stop ultra tight
        self.CAPITAL_PER_TRADE = 0.98  # 98% do capital
        
        # üîÑ CONFIGURA√á√ÉO DE CICLO ULTRA-R√ÅPIDO
        self.CYCLE_DELAY = 3  # 3 segundos entre ciclos
        
        self.client = None
        self.inicializar_client()
        self.lock = Lock()
        self.executando = True
        self.capital_inicial = 0.0
        
        # üìä Estado do sistema
        self.estado_dust = False
        self.ultima_conversao = 0
        self.conversoes_realizadas = 0
        
    def inicializar_client(self):
        """Inicializar cliente Binance com tratamento de erro"""
        try:
            self.client = Client(self.api_key, self.api_secret)
            logger.info("üîó Cliente Binance inicializado com sucesso!")
        except Exception as e:
            logger.error(f"‚ùå Erro ao inicializar cliente: {e}")
            return False
        return True
        
    def obter_saldo_conta(self):
        """Obter saldos atuais da conta com tratamento de erro"""
        try:
            account = self.client.get_account()
            saldos = {}
            
            for asset in account['balances']:
                free = float(asset['free'])
                locked = float(asset['locked'])
                total = free + locked
                
                if total > 0:
                    saldos[asset['asset']] = {
                        'free': free,
                        'locked': locked, 
                        'total': total
                    }
                    
            return saldos
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao obter saldo: {e}")
            return {}

    def converter_dust_btc_para_usdt(self):
        """üö® CONVERS√ÉO CR√çTICA DE DUST BTC PARA USDT"""
        try:
            saldos = self.obter_saldo_conta()
            
            if 'BTC' not in saldos:
                logger.info("üìä Sem BTC para convers√£o")
                return False
                
            btc_livre = saldos['BTC']['free']
            
            # üîç DETEC√á√ÉO DE DUST BTC
            if btc_livre < self.DUST_BTC_THRESHOLD:
                logger.info(f"üö® DUST BTC DETECTADO! {btc_livre:.8f} BTC")
                
                # üí∞ Obter pre√ßo atual BTC/USDT
                ticker = self.client.get_symbol_ticker(symbol='BTCUSDT')
                preco_btc = float(ticker['price'])
                valor_usd = btc_livre * preco_btc
                
                logger.info(f"üíµ Valor dust: ${valor_usd:.2f}")
                
                if valor_usd >= 8.0:  # Se valor >= $8 tenta convers√£o for√ßada
                    return self._tentar_conversao_forcada_btc(btc_livre, preco_btc)
                else:
                    logger.info("üí∏ Dust BTC muito pequeno para convers√£o ($<8)")
                    return False
            
            # ‚úÖ BTC NORMAL - Convers√£o padr√£o
            if btc_livre >= self.DUST_BTC_THRESHOLD:
                return self._executar_venda_btc_normal(btc_livre)
                
            return False
            
        except Exception as e:
            logger.error(f"‚ùå Erro convers√£o dust: {e}")
            return False

    def _tentar_conversao_forcada_btc(self, btc_quantidade, preco_btc):
        """üî• CONVERS√ÉO FOR√áADA DE DUST BTC"""
        try:
            # üéØ Estrat√©gias m√∫ltiplas para dust
            estrategias = [
                # 1. Venda market com quantidade exata
                lambda: self._venda_market_exata(btc_quantidade),
                # 2. Venda com quantidade ajustada -1%
                lambda: self._venda_market_ajustada(btc_quantidade * 0.99),
                # 3. Venda com quantidade ajustada -2%
                lambda: self._venda_market_ajustada(btc_quantidade * 0.98),
                # 4. Convers√£o via dust transfer (se dispon√≠vel)
                lambda: self._tentar_dust_transfer(btc_quantidade),
            ]
            
            for i, estrategia in enumerate(estrategias):
                logger.info(f"üéØ Tentando estrat√©gia {i+1}/4 para dust...")
                try:
                    if estrategia():
                        logger.info(f"‚úÖ Estrat√©gia {i+1} funcionou!")
                        self.conversoes_realizadas += 1
                        return True
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Estrat√©gia {i+1} falhou: {e}")
                    
            logger.error("‚ùå Todas estrat√©gias falharam para dust BTC")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå Erro convers√£o for√ßada: {e}")
            return False

    def _venda_market_exata(self, quantidade):
        """Venda market com quantidade exata"""
        ordem = self.client.order_market_sell(
            symbol='BTCUSDT',
            quantity=f"{quantidade:.8f}"
        )
        logger.info(f"‚úÖ Venda market exata: {quantidade:.8f} BTC")
        return True

    def _venda_market_ajustada(self, quantidade):
        """Venda market com quantidade ajustada"""
        # Arredondar para baixo para evitar insufficient balance
        quantidade_ajustada = round(quantidade, 6)  # 6 decimais
        
        ordem = self.client.order_market_sell(
            symbol='BTCUSDT', 
            quantity=f"{quantidade_ajustada:.6f}"
        )
        logger.info(f"‚úÖ Venda ajustada: {quantidade_ajustada:.6f} BTC")
        return True

    def _tentar_dust_transfer(self, quantidade):
        """Tentar usar dust transfer da Binance"""
        # Esta fun√ß√£o pode n√£o estar dispon√≠vel na API p√∫blica
        # Mas tentamos para completude
        logger.info(f"üîÑ Tentando dust transfer para {quantidade:.8f} BTC")
        # Retorna False pois geralmente n√£o dispon√≠vel via API
        return False

    def _executar_venda_btc_normal(self, btc_quantidade):
        """Executar venda BTC normal (n√£o dust)"""
        try:
            # Quantidade para venda (deixa small buffer)
            quantidade_venda = round(btc_quantidade * 0.998, 6)
            
            ordem = self.client.order_market_sell(
                symbol='BTCUSDT',
                quantity=f"{quantidade_venda:.6f}"
            )
            
            logger.info(f"‚úÖ VENDA BTC NORMAL: {quantidade_venda:.6f} BTC")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro venda BTC normal: {e}")
            return False

    def calcular_score_venda_dust(self):
        """üéØ Score de venda adaptado para situa√ß√µes de dust"""
        try:
            # Obter dados de mercado
            klines = self.client.get_klines(symbol='BTCUSDT', interval='1m', limit=100)
            closes = np.array([float(k[4]) for k in klines])
            volumes = np.array([float(k[5]) for k in klines])
            
            # üìà Indicadores t√©cnicos
            rsi = talib.RSI(closes, timeperiod=14)[-1] if len(closes) >= 14 else 50
            macd_line, macd_signal, _ = talib.MACD(closes)
            macd_diff = macd_line[-1] - macd_signal[-1] if len(macd_line) >= 2 else 0
            
            # üéØ SCORE ULTRA-AGRESSIVO PARA DUST
            score = 0
            
            # RSI favor√°vel para venda (>45 j√° vale pontos)
            if rsi > 65:
                score += 40  # RSI muito alto
            elif rsi > 55:
                score += 25  # RSI alto
            elif rsi > 45:
                score += 10  # RSI m√©dio-alto
                
            # MACD bearish
            if macd_diff < 0:
                score += 20
            elif macd_diff < 0.5:
                score += 10
                
            # Volume (qualquer volume acima da m√©dia vale)
            volume_medio = np.mean(volumes[-10:])
            if volumes[-1] > volume_medio * 1.1:
                score += 15
            elif volumes[-1] > volume_medio:
                score += 10
                
            # üö® BONUS DUST - Se temos dust BTC, score autom√°tico m√≠nimo
            saldos = self.obter_saldo_conta()
            if 'BTC' in saldos:
                btc_livre = saldos['BTC']['free']
                if 0 < btc_livre < self.DUST_BTC_THRESHOLD:
                    score += 25  # Bonus para for√ßar venda de dust
                    logger.info("üö® BONUS DUST APLICADO!")
                    
            # üìä Score de tend√™ncia (mais flex√≠vel)
            if len(closes) >= 5:
                trend_short = closes[-1] < closes[-3]  # Tend√™ncia de 3 velas
                if trend_short:
                    score += 10
                    
            logger.info(f"üìä SCORE VENDA DUST: {score}/100")
            logger.info(f"   RSI: {rsi:.1f}, MACD: {macd_diff:.3f}")
            
            return score
            
        except Exception as e:
            logger.error(f"‚ùå Erro c√°lculo score dust: {e}")
            return 0

    def executar_ciclo_dust_corrigido(self):
        """üö® CICLO PRINCIPAL CORRIGIDO PARA DUST BTC"""
        ciclo = 0
        
        while self.executando:
            try:
                ciclo += 1
                logger.info(f"üö® === CICLO DUST FINAL {ciclo} ===")
                
                # üìä Status da conta
                saldos = self.obter_saldo_conta()
                if not saldos:
                    logger.error("‚ùå Erro ao obter saldos")
                    time.sleep(self.CYCLE_DELAY)
                    continue
                
                btc_livre = saldos.get('BTC', {}).get('free', 0)
                usdt_livre = saldos.get('USDT', {}).get('free', 0)
                
                # üí∞ C√°lculo do capital
                ticker = self.client.get_symbol_ticker(symbol='BTCUSDT')
                preco_btc = float(ticker['price'])
                valor_btc_usd = btc_livre * preco_btc
                capital_total = usdt_livre + valor_btc_usd
                
                if self.capital_inicial == 0:
                    self.capital_inicial = capital_total
                
                posicao = capital_total - self.capital_inicial
                percent_pos = (posicao / self.capital_inicial) * 100 if self.capital_inicial > 0 else 0
                
                logger.info(f"üìâ Posi√ß√£o: ${posicao:.4f} ({percent_pos:.3f}%)")
                logger.info(f"üíº Capital: ${capital_total:.2f} | USDT: ${usdt_livre:.2f}")
                logger.info(f"   ‚Çø BTC: {btc_livre:.8f} = ${valor_btc_usd:.2f}")
                
                # üö® L√ìGICA DUST BTC
                if btc_livre > 0:
                    if btc_livre < self.DUST_BTC_THRESHOLD:
                        logger.info(f"üö® DUST BTC DETECTADO: {btc_livre:.8f}")
                        self.estado_dust = True
                        
                        # üéØ Score para venda de dust  
                        score_venda = self.calcular_score_venda_dust()
                        
                        if score_venda >= self.SCORE_VENDA_MIN:
                            logger.info(f"üí∏ TENTANDO VENDA DUST (Score: {score_venda})")
                            if self.converter_dust_btc_para_usdt():
                                logger.info("‚úÖ DUST BTC CONVERTIDO!")
                                self.estado_dust = False
                            else:
                                logger.info("‚ùå Falha convers√£o dust - tentando pr√≥ximo ciclo")
                        else:
                            logger.info(f"‚úã Hold dust BTC (Score: {score_venda} < {self.SCORE_VENDA_MIN})")
                    else:
                        # BTC normal - usar sistema padr√£o
                        self.estado_dust = False
                        score_venda = self.calcular_score_venda_dust()
                        
                        if score_venda >= self.SCORE_VENDA_MIN:
                            logger.info(f"üí∏ VENDA BTC NORMAL (Score: {score_venda})")
                            if self._executar_venda_btc_normal(btc_livre):
                                logger.info("‚úÖ BTC NORMAL VENDIDO!")
                        else:
                            logger.info(f"‚úã Hold BTC (Score: {score_venda} < {self.SCORE_VENDA_MIN})")
                
                # üõí L√ìGICA DE COMPRA USDT
                if usdt_livre >= self.MIN_USDT_FOR_TRADE and not self.estado_dust:
                    score_compra = self.calcular_score_compra_agressivo()
                    
                    if score_compra >= self.SCORE_COMPRA_MIN:
                        logger.info(f"üõí COMPRA BTC (Score: {score_compra})")
                        self.executar_compra_btc_agressiva(usdt_livre)
                    else:
                        logger.info(f"‚úã Hold USDT (Score: {score_compra} < {self.SCORE_COMPRA_MIN})")
                
                # ‚ö° Status dust
                if self.estado_dust:
                    logger.info("üö® STATUS: MODO DUST BTC ATIVO")
                
                time.sleep(self.CYCLE_DELAY)
                
            except KeyboardInterrupt:
                logger.info("üõë Sistema interrompido pelo usu√°rio")
                self.executando = False
                break
            except Exception as e:
                logger.error(f"‚ùå Erro ciclo: {e}")
                logger.error(traceback.format_exc())
                time.sleep(self.CYCLE_DELAY)

    def calcular_score_compra_agressivo(self):
        """Score para compra ultra-agressiva"""
        try:
            klines = self.client.get_klines(symbol='BTCUSDT', interval='1m', limit=100)
            closes = np.array([float(k[4]) for k in klines])
            volumes = np.array([float(k[5]) for k in klines])
            
            rsi = talib.RSI(closes, timeperiod=14)[-1] if len(closes) >= 14 else 50
            macd_line, macd_signal, _ = talib.MACD(closes)
            macd_diff = macd_line[-1] - macd_signal[-1] if len(macd_line) >= 2 else 0
            
            score = 0
            
            # RSI favor√°vel para compra (baixo)
            if rsi < 30:
                score += 40
            elif rsi < 40:
                score += 25
            elif rsi < 50:
                score += 10
                
            # MACD bullish
            if macd_diff > 0:
                score += 20
            elif macd_diff > -0.5:
                score += 10
                
            # Volume
            volume_medio = np.mean(volumes[-10:])
            if volumes[-1] > volume_medio * 1.2:
                score += 15
                
            # Tend√™ncia de alta recente
            if len(closes) >= 5:
                trend_up = closes[-1] > closes[-3]
                if trend_up:
                    score += 15
                    
            logger.info(f"üìä SCORE COMPRA: {score}/100 (RSI: {rsi:.1f})")
            return score
            
        except Exception as e:
            logger.error(f"‚ùå Erro score compra: {e}")
            return 0

    def executar_compra_btc_agressiva(self, usdt_disponivel):
        """Executar compra BTC ultra-agressiva"""
        try:
            # Usar % do capital para compra
            valor_compra = usdt_disponivel * self.CAPITAL_PER_TRADE
            valor_compra = round(valor_compra, 2)
            
            if valor_compra < self.MIN_USDT_FOR_TRADE:
                logger.info(f"üí∞ Valor muito baixo para compra: ${valor_compra}")
                return False
                
            logger.info(f"üõíüí∏ COMPRA BTC ULTRA-AGRESSIVA")
            logger.info(f"   üí∞ Valor: ${valor_compra}")
            
            ordem = self.client.order_market_buy(
                symbol='BTCUSDT',
                quoteOrderQty=valor_compra
            )
            
            logger.info(f"‚úÖ COMPRA EXECUTADA! ${valor_compra}")
            return True
            
        except BinanceAPIException as e:
            logger.error(f"‚ùå Erro API compra: {e}")
            return False
        except Exception as e:
            logger.error(f"‚ùå Erro compra: {e}")
            return False

def main():
    """üö® MAIN SISTEMA FINAL DUST CORRIGIDO"""
    logger.info("üö®üöÄ SISTEMA FINAL DUST CORRIGIDO INICIADO!")
    logger.info("üí™ PARA CRIAN√áAS FAMINTAS - SUCESSO GARANTIDO!")
    logger.info("üîß Corre√ß√£o dust BTC + ultra-agressivo")
    
    sistema = SistemaFinalDustCorrigido()
    
    try:
        sistema.executar_ciclo_dust_corrigido()
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è Sistema parado pelo usu√°rio")
    except Exception as e:
        logger.error(f"‚ùå Erro cr√≠tico: {e}")
        logger.error(traceback.format_exc())

if __name__ == "__main__":
    main()